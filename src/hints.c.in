#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>
#include <ctype.h>

#include "hints.h"
#include "readline.h"
#include "builtins.h"
#include "utils.h"
#include "apt_repos.h"
#include "networking.h"

#define HINTS_FUNC(type) static char* type##_hints(const char* buf, int* color, int* bold) 
#define CHECK_HINT(succ, hint, buf) if (!succ) { succ = hint(buf, color, bold); }

static const int red __attribute__((unused)) = 31;
static const int green __attribute__((unused)) = 32;
static const int yellow __attribute__((unused)) = 33;
static const int blue __attribute__((unused)) = 34;
static const int magenta __attribute__((unused)) = 35;
static const int cyan __attribute__((unused)) = 36;
static const int white __attribute__((unused)) = 37;

// map user input -> hint
static map command_hints;

HINTS_FUNC(builtins) {  
  linenoiseSetFreeHintsCallback(NULL);
  for (int i = 0; builtins[i]; i++) {
    if (strcmp(builtins[i], "jumper") == 0) continue;
    int len = strlen(buf);
    if (len >= HINTS_MIN_LEN && strncmp(builtins[i], buf, len) == 0) {
      if (len < strlen(builtins[i])) {
        linenoiseSetFreeHintsCallback(free);
        return strdup(builtins[i] + len);
      } else switch(i) { // This is kinda dubious
        case 2: return " <path>";
        case 5: return " <orig> <new>";
        case 8: return " --job <id> --idx <idx> <sig>";
        case 10: case 11: return " <job_idx>";
        }
    }
  }
  return NULL;
}

HINTS_FUNC(commands) {
  char* copy = strdup(buf);
  char* trimmed = trim(copy);

  char** retptr = (char**)map_get(&command_hints, &trimmed);
  free(copy);
  return retptr ? *retptr : NULL;
}

static int comp_str(const void* lhs, const void* rhs) {
  const char* l = *(const char**)lhs;
  const char* r = *(const char**)rhs;
  return strcmp(l, r);
}

// Return negative if lhs comes before rhs
typedef struct { char* str; int freq; } record;
static int comp_rec(const void* lhs, const void* rhs) {
  const record l = *(const record*)lhs;
  const record r = *(const record*)rhs;
  int diff = r.freq - l.freq;
  return diff == 0 ? strlen(r.str) - strlen(l.str) : diff;
}

HINTS_FUNC(history) {
  int buf_len = strlen(buf);
  if (buf_len < HINTS_MIN_LEN) return NULL;
  vec hist = vec_new(sizeof(char*), 0, NULL);

  const char** hist_ptrs = linenoiseHistoryGet();
  int len = linenoiseHistoryGetLen();
  for (int i = 0; i < len; i++) {
    if (strlen(hist_ptrs[i]) >= HIST_HINT_MIN_LEN) vec_push(&hist, &hist_ptrs[i]);
  }
  vec_sort(&hist, comp_str);

  vec recs = vec_new(sizeof(record), 0, NULL);
  for (int i = 0; i < vec_size(&hist);) {
    record rec = { .str = *(char**)vec_get(&hist, i), .freq = 0 };
    while (strcmp(*(char**)vec_get(&hist, i++), rec.str) == 0 && i < vec_size(&hist)) rec.freq++;
    if (rec.freq >= HIST_HINT_MIN_FREQ) vec_push(&recs, &rec);
  }
  vec_sort(&recs, comp_rec);

  char* ret = NULL;
  len = vec_size(&recs) < HIST_HINT_NUM_RECS ? vec_size(&recs) : HIST_HINT_NUM_RECS;
  for (int i = 0; i < len; i++) {
    char* str = ((record*)vec_get(&recs, i))->str;
    if (starts_with(str, buf)) {
      ret = str + buf_len;
      break;
    }
  }
  free_vec(&hist);
  free_vec(&recs);
  return ret;
}

char* hints(const char* buf, int* color, int* bold) {
  if (!buf) return NULL;
  const char* post_pipe = rsplit(buf, "|", NULL);
  
  char* ret = NULL;
  CHECK_HINT(ret,  history_hints, buf);
  CHECK_HINT(ret, builtins_hints, post_pipe);
  CHECK_HINT(ret, commands_hints, post_pipe);
  while (ret && ends_with(buf, " ") && starts_with(ret, " ")) ret++;

  *color = yellow;
  *bold = 0;
  return ret;
}

// TODO: Make the following 3 functions not duplicated between here and networking.c
static size_t hash_char_star(void* data) {
  char* str = *(char**)data;
  size_t hash = 7;
  while(str && *str) hash = hash*31 + *(str++);
  return hash;
}

static bool char_star_eq(void* lhs, void* rhs) {
  return strcmp(*(char**)lhs, *(char**)rhs) == 0;
}

static void clean_char_star(void* addr) {
  free(*(char**)addr);
}


static bool create_hints_file(const char* path) {
  static const char default_command_hints[] = "EMBED_COMMAND_HINTS_HERE";
  int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0644);
  if (fd == -1) return false;
  bool succ = write_all(fd, default_command_hints, sizeof(default_command_hints) - 1);
  close(fd);
  return succ;
}

static void populate_command_hints(const string* contents) {
  int start = 0;
  for(int pos = string_find(contents, 0, "\n"); pos != -1; pos = string_find(contents, start, "\n")) {
    char line[2*MAX_CMD_LEN + 5]; // cmd |-> cmd2
    strncpy(line, contents->cstr + start, pos - start);
    line[pos - start] = '\0';

    char* user;
    char* after = (char*)rsplit(line, "|->", &user);

    // I feel like I'm doing C string manipulation wrong
    char* tuser = strdup(trim(user));
    string hint = string_new(trim(after));
    string_insert(&hint, 0, " ");

    map_insert(&command_hints, &tuser, &hint.cstr);
    
    free(user);
    start = pos + 1;
  }
}

static void cleanup() {
  free_map(&command_hints);
}

void init_hints() {
  command_hints = map_new(sizeof(char*), sizeof(char*), 0, hash_char_star, char_star_eq,
			  clean_char_star, clean_char_star);

  const char* temp_strs[] = {home_dir, "/", HINTS_COMMON_FILE, NULL};
  char* hints_file = concat_many(temp_strs);
  if (access(hints_file, F_OK) == -1 && !create_hints_file(hints_file)) {
    free(hints_file);
    return;
  }
  string contents = readfile(hints_file);
  free(hints_file);
  populate_command_hints(&contents);
  free_string(&contents);
  
  atexit(cleanup);
}
